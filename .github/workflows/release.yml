name: Release

on:
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write

env:
  REGISTRY: cr.yandex/crp7c6dnjn6sbflchmsn
  IMAGE_NAME: app

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set version number
        id: version
        run: echo "VERSION=${{ github.run_number }}" >> $GITHUB_ENV

      - name: Install dependencies and run lint & tests
        run: |
          npm ci
          npm run lint
          npm run test

      - name: Setup Docker
        uses: docker/setup-buildx-action@v3

      - name: Docker Login to Yandex
        run: echo "${{ secrets.YA_REGISTRY_TOKEN }}" | docker login -u oauth --password-stdin cr.yandex

      - name: Build Docker Image
        run: |
          docker build -t $REGISTRY/$IMAGE_NAME:${{ env.VERSION }} .
          docker tag $REGISTRY/$IMAGE_NAME:${{ env.VERSION }} $REGISTRY/$IMAGE_NAME:${{ env.VERSION }}_latest

      - name: Push Docker Image
        run: |
          docker push $REGISTRY/$IMAGE_NAME:${{ env.VERSION }}
          docker push $REGISTRY/$IMAGE_NAME:${{ env.VERSION }}_latest

      - name: Checkout main and create release branch
        run: |
          git checkout main
          git pull origin main
          git checkout -b releases/${{ env.VERSION }}

      - name: Configure Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get previous tag
        id: prev_tag
        run: |
          PREV_TAG=$(git tag --sort=-creatordate | grep -E '^v[0-9]+' | head -n 1)
          echo "PREV_TAG=$PREV_TAG" >> $GITHUB_ENV

      - name: Generate changelog
        run: |
          if [ -z "$PREV_TAG" ]; then
            git log --oneline > changelog_commits.txt
          else
            git log $PREV_TAG..HEAD --oneline > changelog_commits.txt
          fi
          echo -e "## v${{ env.VERSION }} - $(date +'%Y-%m-%d')\n\n$(cat changelog_commits.txt)\n\n$(cat CHANGELOG.md)" > CHANGELOG.md

      - name: Commit and push release branch
        run: |
          git add CHANGELOG.md
          git commit -m "Update changelog for release v${{ env.VERSION }}"
          git push --set-upstream origin releases/${{ env.VERSION }}

      - name: Tag Release
        run: |
          git tag v${{ env.VERSION }}
          git push origin v${{ env.VERSION }}

      - name: Create Pull Request to merge changelog into main
        uses: peter-evans/create-pull-request@v6
        with:
          base: main
          branch: releases/${{ env.VERSION }}
          title: "chore: merge release v${{ env.VERSION }} to main"
          body: "Auto-generated PR to merge changelog and release updates into main."
          commit-message: "chore: update CHANGELOG.md for v${{ env.VERSION }}"

      - name: Create GitHub Issue for Release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prevTag = process.env.PREV_TAG || '';
            let commits = '';
            if (prevTag) {
              const { data } = await github.rest.repos.compareCommits({
                owner: context.repo.owner,
                repo: context.repo.repo,
                base: prevTag,
                head: `v${process.env.VERSION}`
              });
              commits = data.commits.map(c => `- ${c.commit.message.split('\n')[0]} (${c.sha.substring(0,7)})`).join('\n');
            } else {
              commits = "No previous tag found, unable to list commits.";
            }
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Release ${process.env.VERSION}`,
              body: `Дата: ${new Date().toISOString()}\nАвтор: ${context.actor}\nВерсия: ${process.env.VERSION}\nОбраз: cr.yandex/${process.env.REGISTRY}/app:${process.env.VERSION}\n\nКоммиты:\n${commits}`
            });
